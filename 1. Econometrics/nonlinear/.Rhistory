doctor[i, "Prediction"] <- pred(prev_pred, m, p, q)
}
}
# make some plots --------------------------------------------------------------
# just the first four periods
forecast <-   doctor %>%
slice(1:4) %>%
select(1, 2, 5) %>%
rename(Actual = revenues) %>%
gather(key = type, value = rev, Actual, Prediction) %>%
ggplot(aes(x = week, y = rev, colour = type)) +
geom_line() +
geom_point(aes(shape = type)) +
scale_x_continuous(breaks = seq(from = 0, to =  12, by = 1)) +
scale_y_continuous(breaks = seq(from = 0, to =  10, by = 1)) +
labs(x = "Week", y = "Revenue ($m)") +
theme_minimal() +
theme(legend.position = "bottom",
legend.title = element_blank())
library(RPostgreSQL)
password <- .rs.askForPassword("Your database password.")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "nutrients",
host = "localhost", port = 5432,
user = "postgres", password = password)
library(RPostgreSQL)
password <- .rs.askForPassword("Your database password.")
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, dbname = "Nutrition",
host = "localhost", port = 5432,
user = "postgres", password = password)
remove(password)
#probit, family = binomial
inlf.probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "probit"), data)
#probit, family = binomial
inlf.logit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
#deviance residuals : sum of square of dr = deviance model
summary(inlf.logit)
# Example 17.1
load("mroz.RData")
### binary response model estimation
# family = "gaussian"
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
setwd("~/2ndSemster/Econometrics/lec7")
# Example 17.1
load("mroz.RData")
### binary response model estimation
# family = "gaussian"
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
#linear regression
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
#probit, family = binomial
inlf.probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "probit"), data)
#probit, family = binomial
inlf.logit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
#deviance residuals : sum of square of dr = deviance model
summary(inlf.logit)
### deviance
# deviance = sum of squared deviance residuals
summary(residuals(inlf.logit, type = "deviance"))
#sum of square deviance residual = equal to deviance of model -> deviance is equal to -2*loglikelyhood
sum(residuals(inlf.logit, type = "deviance")^2)
inlf.logit$deviance
# deviance = -2 * log likelihood
(-2) * logLik(inlf.logit)
### binary response model estimation
# family = "gaussian"
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
#linear regression
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
# information criteria
AIC(inlf.logit)
BIC(inlf.logit)
### LR test (LR = 2(Lur - Lr) ~ chi^2) (only particular betas = 0)
##test for overall significance(all beta = 0, null deviance - residual deviance ~ chi^2)
# test for overall significance
library(lmtest) #likelyhood function
lrtest(inlf.logit)
LR.overall <- 1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
LR.overall <- 1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
LR.overall
## test for overall significance(all beta = 0, null deviance - residual deviance ~ chi^2)
LR.overall <- 1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
LR.overall
# hypothesis testing
library(car)
linearHypothesis(inlf.logit, c("exper = 0", "expersq = 0"))
# confidence intervals
confint(inlf.logit)
### model selection
inlf.null <- glm(inlf ~ 1, family = "binomial"(link = "logit"), data)
inlf.full <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
step(inlf.null, scope = list(lower = inlf.null, upper = inlf.full), direction = "forward")
inlf.fo<-step(inlf.null, scope = list(lower = inlf.null, upper = inlf.full), direction = "forward")
formula(inlf.fo)
AIC(formula(inlf.fo))
formula(inlf.bac)
inlf.bac <- step(inlf.full, direction = "backward")
formula(inlf.bac)
### prediction
new.ob = data.frame(nwifeinc = 10.91, educ = 12, exper = 14, expersq = 14^2,
age = 32, kidslt6 = 1, kidsge6 = 0)
new.ob
predict(inlf.logit, newdata = new.ob, type = "link")
predict(inlf.logit, newdata = new.ob, type = "link")
predict(inlf.logit, newdata = new.ob, type = "response")
predict(inlf.logit, newdata = new.ob, type = "response")
xb <- sum(cbind(1, new.ob) * inlf.logit$coefficients)
xb
xb <- sum(cbind(1, new.ob) * inlf.logit$coefficients)
phat <- exp(xb)/(1 + exp(xb))
phat
### interpretation of logit model
# partial effects in logit model
mean(inlf.logit$fitted.values * (1 - inlf.logit$fitted.values)) * inlf.logit$coefficients #slide 10 page
# non-linear partial effects
new.ob <- with(data, data.frame(nwifeinc = mean(nwifeinc), educ = mean(educ), exper = mean(exper),
expersq = mean(expersq), age = mean(age), kidslt6 = c(0, 1, 2), kidsge6 = 1))
new.ob
# partial effect of having the first kid less than 6
predict(inlf.logit, newdata = new.ob[2, ], type = "response") -
predict(inlf.logit, newdata = new.ob[1, ], type = "response")
# partial effect of having the second kid less than 6
predict(inlf.logit, newdata = new.ob[3, ], type = "response") -
predict(inlf.logit, newdata = new.ob[2, ], type = "response")
setwd("~/2ndSemster/Econometrics/lec8")
# Example 9.7. City crime rates
load("crime2.RData")
crime.87 <- lm(crmrte ~ unem, data, subset = year == 87)
head(data)
crime.pool <- lm(crmrte ~ unem + factor(year), data)
# estimation with plm
install.packages("plm")
library(plm)
# create a panel data frame
data$city <- rep(1:46, each = 2)
head(darta)
head(data)
head(data)
#panel data frame + index(cross-sectional unit, time series unit)
data.p <- pdata.frame(data, index = c("city", "year"))
# index of a panel
index(data.p)
# dimensions of a panel
pdim(data.p)
# panel data operations
head(data.p$unem, 10)
head(diff(data.p$unem), 10)
data.p
head(data.p)
head(lag(data.p$unem), 10)
# first difference estimation
crime.fd <- plm(crmrte ~ d87 + unem, data, index = c("city", "year"),
effect = "individual", model = "fd")
summary(crime.fd)
head(data)
# Example 14.1. Effect of job training on firm scrap rates
load("jtrain.RData")
load('loanapp.RData')
rm(list = ls())
load('loanapp.RData')
View(desc)
knitr::opts_chunk$set(message = FALSE)
library(ggplot2)
library(car)
library(dplyr)
library(stargazer)
library(lmtest)
# Example 17.1
load("mroz.RData")
# estimation of binary response models
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
# Example 17.1
load("mroz.RData")
# estimation of binary response models
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
inlf.probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "probit"), data)
inlf.logit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
stargazer(inlf.lpm.lm, inlf.lpm, inlf.probit, inlf.logit, header = FALSE, type = 'latex',
title = "Example 17.1. Labour Force Participation")
summary(inlf.logit)
# deviance = sum of squared deviance residuals
summary(residuals(inlf.logit, type = "deviance"))
sum(residuals(inlf.logit, type = "deviance")^2)
inlf.logit$deviance
# deviance = -2 * log likelihood
(-2) * logLik(inlf.logit)
### goodness of fit
# pseudo r-squared
1 - inlf.logit$deviance/inlf.logit$null.deviance
# percent correctly predicted
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
# information criteria
AIC(inlf.logit)
BIC(inlf.logit)
# Example 17.1
load("mroz.RData")
setwd("~/2ndSemster/Econometrics/lec7")
# Example 17.1
load("mroz.RData")
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper +expersq + age + kidslt6 + kidsge6, family = "gaussian", data)
summary(inlf.lpm)
#linear regression
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
summary(inlf.lpm.lm)
inlf.probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = probit), data)
summary(inlf.probit)
summary(residuals(inlf.logit, type = "deviance"))
sum(residuals(inlf.logit, type = "deviance")^2)
inlf.logit$deviance
inlf.logit$deviance
(-2) *logLik(inlf.logit)
(-2) *logLik(inlf.logit)
1 - inlf.logit$deviance/inlf.logit$null.deviance
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
data$inlf
inlf.logit$fitted.values
head(data$inlf)
head(inlf.logit$fitted.values)
1 - 0.7 <= 0.5
sum(1 - 0.7 <= 0.5)
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
AIC(inlf.logit)
BIC(inlf.logit)
# test for overall significance
lrtest(inlf.logit)
# test for overall significance
lrtest(inlf.logit)
1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance, df = inlf.logit$df.null - inlf.logit$df.residual)
# test of overall significance manually
1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
# test for overall significance
lrtest(inlf.logit)
# test for overall significance
library(lmtest) #likelyhood function
lrtest(inlf.logit) #likelyhood ratio test (LR test)
## test for overall significance(all beta = 0, null deviance - residual deviance ~ chi^2)
LR.overall <- 1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
# hypothesis testing
library(car)
linearHypothesis(inlf.logit, c("exper = 0", "expersq = 0")) #it is also based on the chisq test
# confidence intervals
confint(inlf.logit)
lrtest(inlf.logit) #likelyhood ratio test (LR test)
1 - inlf.logit$deviance/inlf.logit$null.deviance
### goodness of fit
# pseudo r-squared
1 - inlf.logit$deviance/inlf.logit$null.deviance
# percent correctly predicted
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
### goodness of fit
# pseudo r-squared
1 - inlf.logit$deviance/inlf.logit$null.deviance
### goodness of fit
# pseudo r-squared
1 - inlf.logit$deviance/inlf.logit$null.deviance
# percent correctly predicted [sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5): fitting이 잘 된 수)]
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
# information criteria
AIC(inlf.logit)
BIC(inlf.logit)
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
summary(residual(inlf.logit, type = 'deviance'))
summary(residuals(inlf.logit, type = 'deviance'))
### deviance
# deviance = sum of squared deviance residuals
summary(residuals(inlf.logit, type = "deviance"))
(-2)*logLik(inlf.logit)
inlf.logit$deviance
1 - inlf.logit/inlf.logit$null.deviance
1 - inlf.logit$deviance/inlf.logit$null.deviance
inlf.logit$null.deviance
lrtest(inlf.logit) #likelyhood ratio test (LR test)
inlf.null <- glm(inlf ~ 1, fmaily = "binomial"(link = "logit"), data = )
inlf.null <- glm(inlf ~ 1, fmaily = "binomial"(link = "logit"), data)
inlf.null <- glm(inlf ~ 1, family = 'binomial'(link = 'logit'), data)
inlf.null <- glm(inlf ~  nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
### model selection
inlf.null <- glm(inlf ~ 1, family = "binomial"(link = "logit"), data)
inlf.full <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
inlf.fo <- step(inlf.null, scope = list(lower = inlf.null, upper = inlf.full), direction = "forward")
formula(infl.fo)
formula(infl.fo)
inlf.fo <- step(inlf.null, scope = list(lower = inlf.null, upper = inlf.full), direction = "forward")
formula(infl.fo)
formula(inlf.fo)
new.ob <- data.frame(nwifeinc = 10.91, educ = 12, exper = 14, expersq = 14^2, age = 32, kidslt6 = 1, kidsge6 = 0)
predict(inlf.logit, newdata = new.ob, type = "link")
1/(1+log(0.8504559))
predict(inlf.logit, newdata = new.ob, type = "response")
log(1.193293/1-1.193293)
log(0.8504559)
predict(inlf.logit, newdata = new.ob, type = "response")
#same as type = "link"
xb <- sum(cbind(1, new.ob) * inlf.logit$coefficients) #it means nothing. just input value
sb
xb
cbind(1, new.ob
)
sum(cbind(1, new.ob)
)
inlf.logit$coefficients)
cbind(1, new.ob)
inlf.logit$coefficients
exp(xb) / (1+exp(xb))
new.ob[2, ]
new.ob <- with(data, data.frame(nwifeinc = mean(nwifeinc), educ = mean(educ), exper = mean(exper), expersq = mean(expersq), age = mean(age), kidslt6 = c(0, 1, 2), kidsge6 = 1 ))
# partial effect of having the first kid less than 6
predict(inlf.logit, newdata = new.ob[2, ], type = "response") -
predict(inlf.logit, newdata = new.ob[1, ], type = "response") # having the first kid -0.3456246
new.ob[2, ]
new.ob
head(data)
# partial effect of having the first kid less than 6
predict(inlf.logit, newdata = new.ob[2, ], type = "response") -
predict(inlf.logit, newdata = new.ob[1, ], type = "response") # having the first kid -0.3456246
# partial effect of having the second kid less than 6
predict(inlf.logit, newdata = new.ob[3, ], type = "response") -
predict(inlf.logit, newdata = new.ob[2, ], type = "response")
# partial effects in logit model
mean(inlf.logit$fitted.values * (1 - inlf.logit$fitted.values)) * inlf.logit$coefficients
# partial effects in logit model
mean(inlf.logit$fitted.values * (1 - inlf.logit$fitted.values)) * inlf.logit$coefficients
inlf.logit$fitted.values
1-inlf.logit$fitted.values
mean(inlf.logit$fitted.values * (1 - inlf.logit$fitted.values))
inlf.logit$coefficients
# partial effects in logit model
mean(inlf.logit$fitted.values * (1 - inlf.logit$fitted.values)) * inlf.logit$coefficients
# non-linear partial effects (only number of kids difference)
new.ob <- with(data, data.frame(nwifeinc = mean(nwifeinc), educ = mean(educ), exper = mean(exper),
expersq = mean(expersq), age = mean(age), kidslt6 = c(0, 1, 2), kidsge6 = 1))
# partial effect of having the first kid less than 6
predict(inlf.logit, newdata = new.ob[2, ], type = "response") -
predict(inlf.logit, newdata = new.ob[1, ], type = "response") # having the first kid -0.3456246
# partial effect of having the second kid less than 6
predict(inlf.logit, newdata = new.ob[3, ], type = "response") -
predict(inlf.logit, newdata = new.ob[2, ], type = "response")
rm(list=ls())
load('loanapp.RData')
dat<- data
probit.1 <- glm(approve ~ white, family = 'binomial'link('probit'))
probit.1 <- glm(approve ~ white, family = 'binomial'link('probit'), data)
probit.1 <- glm(approve ~ white, family = 'binomial'(link ='probit'), data)
summary(probit.1)
head(data)
summary(probit.1)
model2<- glm(approve~ hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr )
model2<- glm(approve~ hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit))
model2<- glm(approve~ hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit))
model2<- glm(approve~ hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit'))
model2<- glm(approve~ hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit'), data)
summary(model2)
model2<- glm(approve~ white + hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit'), data)
summary(model2)
model2<- glm(approve~ white + hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'logit'), data)
model3<- glm(approve~ white + hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'logit'), data)
summary(model3)
model2<- glm(approve~ white + hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'probit'), data)
summary(model2)
new.ob = data.frame(white = 1)
new.ob
predict(probit.1, newdata = new.ob, type = "response")
new.ob = data.frame(white = 0)
new.ob
predict(probit.1, newdata = new.ob, type = "response")
probit.1 <- glm(approve ~ white, family = 'binomial'(link ='probit'), data)
summary(probit.1)
log(0.78395)/(1+log(0.78395))
summary(probit.1)
log(0.78395+0.54695)/(1+log(0.78395+0.54695))
predict(probit.1, newdata = new.ob, type = "response")
new.ob = data.frame(white = 0)
new.ob
predict(probit.1, newdata = new.ob, type = "response")
load('loanapp.RData')
dat<- data
View(desc)
probit.1 <- glm(approve ~ white, family = 'binomial'(link ='probit'), data)
summary(probit.1)
new.white = data.frame(white = 1)
new.white
predict(probit.1, newdata = new.white, type = "response")
new.non = data.frame(white = 0)
new.non
predict(probit.1, newdata = new.non, type = "response")
load('loanapp.RData')
dat<- data
probit.1 <- glm(approve ~ white, family = 'binomial'(link ='probit'), data)
summary(probit.1)
new.white = data.frame(white = 1)
new.white
predict(probit.1, newdata = new.white, type = "response")
new.non = data.frame(white = 0)
new.non
predict(probit.1, newdata = new.non, type = "response")
predict(probit.1, newdata = new.non, type = "response")
predict(probit.1, newdata = new.white, type = "response")
new.obs <- with(data, dataframe(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(unem), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(morlat1), mortlat2 = mean(mortlat2), vr = mean(vr))
new.obs <- with(data, dataframe(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(unem), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(morlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
new.obs <- with(data, dataframe(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(morlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
new.obs <- with(data, dataframe(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
new.obs <- with(data, dataframe(white = c(1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
new.obs <- with(data, data.frame(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
predict(model2, newdata = new.obs[1], type = "response")
predict(model2, newdata = new.obs[1,], type = "response")
new.obs
summary(data)
predict(model2, newdata = new.obs[1,], type = "response", na.rm = T)
new.obs <- with(data, data.frame(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male), married = mean(married), dep = mean(dep), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr), na.rm=T))
new.obs
new.obs <- with(data, data.frame(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male, na.rm = T), married = mean(married, na.rm = T), dep = mean(dep, na.rm = T), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
predict(model2, newdata = new.obs[1,], type = "response")
predict(model2, newdata = new.obs[2,], type = "response")
new.obs
model2<- glm(approve~ white + hrat + obrat + loanprc + unem + male + married + dep + sch + cosign + chist + pubrec + mortlat1+ mortlat2 + vr, family = "binomial"(link = 'logit'), data)
summary(model2)
new.obs <- with(data, data.frame(white = c(0, 1), hrat = mean(hrat), obrat = mean(obrat), loanprc = mean(loanprc), unem = mean(unem), male = mean(male, na.rm = T), married = mean(married, na.rm = T), dep = mean(dep, na.rm = T), sch = mean(sch), cosign = mean(cosign), chist = mean(chist), pubrec = mean(pubrec), mortlat1 = mean(mortlat1), mortlat2 = mean(mortlat2), vr = mean(vr)))
predict(model2, newdata = new.obs[1,], type = "response")
predict(model2, newdata = new.obs[2,], type = "response")
desc
load('rental.RData')
# hypothesis testing
linearHypothesis(inlf.logit, c("exper = 0", "expersq = 0"))
load('loanapp.RData')
dat<- data
probit.1 <- glm(approve ~ white, family = 'binomial'(link ='probit'), data)
summary(probit.1)
new.white = data.frame(white = 1)
new.white
predict(probit.1, newdata = new.white, type = "response")
new.non = data.frame(white = 0)
new.non
predict(probit.1, newdata = new.non, type = "response")
predict(probit.1, newdata = new.white, type = "response")
predict(probit.1, newdata = new.non, type = "response")
#this is beta0 + beta1 x1+ .... + beta_k xk
predict(inlf.logit, newdata = new.ob, type = "link")
### binary response model estimation
# family = "gaussian"
inlf.lpm <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "gaussian", data)
#linear regression
inlf.lpm.lm <- lm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, data)
#probit, family = binomial
inlf.probit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "probit"), data)
#probit, family = binomial
inlf.logit <- glm(inlf ~ nwifeinc + educ + exper + expersq + age
+ kidslt6 + kidsge6, family = "binomial"(link = "logit"), data)
#deviance residuals : sum of square of dr = deviance model
summary(inlf.logit)
### deviance
# deviance = sum of squared deviance residuals
summary(residuals(inlf.logit, type = "deviance"))
#sum of square deviance residual = equal to deviance of model -> deviance is equal to -2*loglikelyhood
sum(residuals(inlf.logit, type = "deviance")^2)
inlf.logit$deviance
# deviance = -2 * log likelihood
(-2) * logLik(inlf.logit)
### goodness of fit
# pseudo r-squared
1 - inlf.logit$deviance/inlf.logit$null.deviance
# percent correctly predicted
sum(abs(data$inlf - inlf.logit$fitted.values) <= 0.5)/nrow(data)
# information criteria
AIC(inlf.logit)
BIC(inlf.logit)
# test for overall significance
library(lmtest) #likelyhood function
lrtest(inlf.logit) #likelyhood ratio test (LR test)
## test for overall significance(all beta = 0, null deviance - residual deviance ~ chi^2)
LR.overall <- 1 - pchisq(inlf.logit$null.deviance - inlf.logit$deviance,
df = inlf.logit$df.null - inlf.logit$df.residual)
# hypothesis testing
library(car)
linearHypothesis(inlf.logit, c("exper = 0", "expersq = 0")) #it is also based on the chisq test
# confidence intervals
confint(inlf.logit)
### model selection
inlf.null <- glm(inlf ~ 1, family = "binomial"(link = "logit"), data)
#this is beta0 + beta1 x1+ .... + beta_k xk
predict(inlf.logit, newdata = new.ob, type = "link")
